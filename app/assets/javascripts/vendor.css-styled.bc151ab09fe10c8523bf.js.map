{"version":3,"file":"vendor.css-styled.bc151ab09fe10c8523bf.js","mappings":"iIAsGA,QA5CA,SAAgBA,GACd,IAEIC,EAFAC,EAAkB,MAjDxB,SAAcC,GAIZ,IAHA,IAAIC,EAAO,KACPC,EAAOF,EAAIG,OAETD,GACJD,EAAe,GAAPA,EAAaD,EAAII,aAAaF,GAMxC,OAAOD,IAAS,CAClB,CAKSI,CAgC+BR,GAhCfS,SAAS,IAiC5BC,EAAc,EAElB,MAAO,CACLC,UAAWT,EACXU,OAAQ,SAAUC,GAChB,IAEIC,EAFAC,EApCV,SAAuBC,GACrB,GAAIA,EAAcC,YAAa,CAC7B,IAAIC,EAAWF,EAAcC,cAE7B,GAA0B,KAAtBC,EAASC,SACX,OAAOD,CAEX,CAGF,CA0BuBE,CAAcP,GAC3BQ,EAA6B,IAAhBX,EAejB,OAZIK,GAAcM,KAChBP,EA9BR,SAAqBH,EAAWX,EAAKe,GACnC,IAAIO,EAAQC,SAASC,cAAc,SAcnC,OAbAF,EAAMG,aAAa,OAAQ,YAC3BH,EAAMI,UAAY1B,EAAI2B,QAAQ,eAAe,SAAUC,EAAKC,GAC1D,OAAO,QAAWA,GAAUC,KAAI,SAAUC,GACxC,OAAIA,EAAYC,QAAQ,YAAc,EAC7BD,EAAYJ,QAAQ,YAAa,IAC/BI,EAAYC,QAAQ,UAAY,EAClC,GAAKD,EAAYJ,QAAQ,UAAW,IAAMhB,GAG5C,IAAMA,EAAY,IAAMoB,CACjC,IAAGE,KAAK,MAAQ,GAClB,KACClB,GAAcQ,SAASW,MAAQX,SAASY,MAAMC,YAAYd,GACpDA,CACT,CAcuBe,CAAYnC,EAAiBF,EAAKe,IAG/CM,IACFpB,EAAgBa,GAGbC,KACDL,EAGG,CACL4B,QAAS,WACHvB,GACFF,EAAG0B,YAAYzB,GACfA,EAAe,OAEXJ,EAAc,KACdA,EAGgB,IAAhBA,GAAqBT,IACvBA,EAAcuC,WAAWD,YAAYtC,GACrCA,EAAgB,MAGtB,EAEJ,EAEJ,C","sources":["webpack://Gwaphics/./node_modules/css-styled/dist/styled.esm.js"],"sourcesContent":["/*\nCopyright (c) 2019 Daybrush\nname: css-styled\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/css-styled.git\nversion: 0.1.7\n*/\nimport { splitComma } from '@daybrush/utils';\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nvar stringHash = hash;\n\nfunction getHash(str) {\n  return stringHash(str).toString(36);\n}\nfunction getShadowRoot(parentElement) {\n  if (parentElement.getRootNode) {\n    var rootNode = parentElement.getRootNode();\n\n    if (rootNode.nodeType === 11) {\n      return rootNode;\n    }\n  }\n\n  return;\n}\nfunction injectStyle(className, css, shadowRoot) {\n  var style = document.createElement(\"style\");\n  style.setAttribute(\"type\", \"text/css\");\n  style.innerHTML = css.replace(/([^}{]*){/mg, function (all, selector) {\n    return splitComma(selector).map(function (subSelector) {\n      if (subSelector.indexOf(\":global\") > -1) {\n        return subSelector.replace(/\\:global/g, \"\");\n      } else if (subSelector.indexOf(\":host\") > -1) {\n        return \"\" + subSelector.replace(/\\:host/g, \".\" + className);\n      }\n\n      return \".\" + className + \" \" + subSelector;\n    }).join(\", \") + \"{\";\n  });\n  (shadowRoot || document.head || document.body).appendChild(style);\n  return style;\n}\n\nfunction styled(css) {\n  var injectClassName = \"rCS\" + getHash(css);\n  var injectCount = 0;\n  var injectElement;\n  return {\n    className: injectClassName,\n    inject: function (el) {\n      var shadowRoot = getShadowRoot(el);\n      var firstMount = injectCount === 0;\n      var styleElement;\n\n      if (shadowRoot || firstMount) {\n        styleElement = injectStyle(injectClassName, css, shadowRoot);\n      }\n\n      if (firstMount) {\n        injectElement = styleElement;\n      }\n\n      if (!shadowRoot) {\n        ++injectCount;\n      }\n\n      return {\n        destroy: function () {\n          if (shadowRoot) {\n            el.removeChild(styleElement);\n            styleElement = null;\n          } else {\n            if (injectCount > 0) {\n              --injectCount;\n            }\n\n            if (injectCount === 0 && injectElement) {\n              injectElement.parentNode.removeChild(injectElement);\n              injectElement = null;\n            }\n          }\n        }\n      };\n    }\n  };\n}\n\nexport default styled;\n//# sourceMappingURL=styled.esm.js.map\n"],"names":["css","injectElement","injectClassName","str","hash","i","length","charCodeAt","stringHash","toString","injectCount","className","inject","el","styleElement","shadowRoot","parentElement","getRootNode","rootNode","nodeType","getShadowRoot","firstMount","style","document","createElement","setAttribute","innerHTML","replace","all","selector","map","subSelector","indexOf","join","head","body","appendChild","injectStyle","destroy","removeChild","parentNode"],"sourceRoot":""}